// WordPress webpack config.
const defaultConfig = require( '@wordpress/scripts/config/webpack.config' );

// Plugins.
const RemoveEmptyScriptsPlugin = require( 'webpack-remove-empty-scripts' );
const CopyPlugin = require('copy-webpack-plugin');

// Utilities.
const path = require( 'path' );
const { getWebpackEntryPoints } = require( '@wordpress/scripts/utils/config' );

// Add any a new entry point by extending the webpack config.
module.exports = {
	...defaultConfig,

		entry: {
			// add default entry points from wp scripts/utils/conifg, this adds our /blocks folder
			...getWebpackEntryPoints(),
			// add custom javascript
			'js/block-variations': path.resolve( process.cwd(), 'src/js', 'block-variations.js' ),
			'js/unregister': path.resolve( process.cwd(), 'src/js', 'unregister.js' ),
			'js/utk':  path.resolve( process.cwd(), 'src/js', 'utk.js' ),
			'js/search-slider': path.resolve( process.cwd(), 'src/js', 'search-slider.js' ),
			'editor-restrict': path.resolve( process.cwd(), 'src/scss', 'editor-restrict.scss' ),
			'screen':  path.resolve( process.cwd(), 'src', 'screen.scss' ),
			'editor':  path.resolve( process.cwd(), 'src', 'editor-style.scss' ),
		},
		plugins: [
			// Include WP's plugin config.
			...defaultConfig.plugins,
			// Removes the empty `.js` files generated by webpack but
			// sets it after WP has generated its `*.asset.php` file.
			new RemoveEmptyScriptsPlugin( {
				stage: RemoveEmptyScriptsPlugin.STAGE_AFTER_PROCESS_PLUGINS
			} ),
      new CopyPlugin({
				// copy folders needed for theme
        patterns: [
          
          // Copy individual files
          { from: 'src/screenshot.png' },
          { from: 'src/readme.txt' },
					{ from: 'src/style.css' },
          { from: 'src/theme.json' },

          // Copy assets directory with context
          { from: '**/*', 
            context: 'src/assets',
            to: ({ context, absoluteFilename }) => {
            const relativePath = path.relative(context, absoluteFilename);
              return path.join('assets', relativePath);
            }, 
          },

          // Copy specific directorie
          { from: 'src/parts', to: 'parts' },
          { from: 'src/templates', to: 'templates' },
					{ from: 'src/tests', to: 'tests' },
        ],
      })
		]
	
};